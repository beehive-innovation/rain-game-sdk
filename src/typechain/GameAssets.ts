/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export type StateStruct = {
  stackIndex: BigNumberish;
  stack: BigNumberish[];
  sources: BytesLike[];
  constants: BigNumberish[];
  arguments: BigNumberish[];
};

export type StateStructOutput = [
  BigNumber,
  BigNumber[],
  string[],
  BigNumber[],
  BigNumber[]
] & {
  stackIndex: BigNumber;
  stack: BigNumber[];
  sources: string[];
  constants: BigNumber[];
  arguments: BigNumber[];
};

export type AssetDetailsStruct = {
  lootBoxId: BigNumberish;
  id: BigNumberish;
  priceConfig: StateStruct;
  canMintConfig: StateStruct;
  currencies: string[];
  assetClass: BigNumberish;
  rarity: BigNumberish;
  creator: string;
};

export type AssetDetailsStructOutput = [
  BigNumber,
  BigNumber,
  StateStructOutput,
  StateStructOutput,
  string[],
  BigNumber,
  number,
  string
] & {
  lootBoxId: BigNumber;
  id: BigNumber;
  priceConfig: StateStructOutput;
  canMintConfig: StateStructOutput;
  currencies: string[];
  assetClass: BigNumber;
  rarity: number;
  creator: string;
};

export type StateConfigStruct = {
  sources: BytesLike[];
  constants: BigNumberish[];
  stackLength: BigNumberish;
  argumentsLength: BigNumberish;
};

export type StateConfigStructOutput = [
  string[],
  BigNumber[],
  BigNumber,
  BigNumber
] & {
  sources: string[];
  constants: BigNumber[];
  stackLength: BigNumber;
  argumentsLength: BigNumber;
};

export type GameAssetsConfigStruct = { _creator: string; _baseURI: string };

export type GameAssetsConfigStructOutput = [string, string] & {
  _creator: string;
  _baseURI: string;
};

export type AssetConfigStruct = {
  name: string;
  description: string;
  lootBoxId: BigNumberish;
  priceConfig: StateConfigStruct;
  canMintConfig: StateConfigStruct;
  currencies: string[];
  assetClass: BigNumberish;
  rarity: BigNumberish;
};

export type AssetConfigStructOutput = [
  string,
  string,
  BigNumber,
  StateConfigStructOutput,
  StateConfigStructOutput,
  string[],
  BigNumber,
  number
] & {
  name: string;
  description: string;
  lootBoxId: BigNumber;
  priceConfig: StateConfigStructOutput;
  canMintConfig: StateConfigStructOutput;
  currencies: string[];
  assetClass: BigNumber;
  rarity: number;
};

export interface GameAssetsInterface extends utils.Interface {
  functions: {
    'Admin()': FunctionFragment;
    'RemoveCreator(address)': FunctionFragment;
    'addCreator(address)': FunctionFragment;
    'assets(uint256)': FunctionFragment;
    'balanceOf(address,uint256)': FunctionFragment;
    'balanceOfBatch(address[],uint256[])': FunctionFragment;
    'createClass(string,string,string[])': FunctionFragment;
    'createNewAsset((string,string,uint256,(bytes[],uint256[],uint256,uint256),(bytes[],uint256[],uint256,uint256),address[],uint256,uint8))': FunctionFragment;
    'getAssetPrice(uint256,address,uint256)': FunctionFragment;
    'getClasses()': FunctionFragment;
    'getCreators()': FunctionFragment;
    'initialize((address,string))': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'mintAssets(uint256,uint256)': FunctionFragment;
    'onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)': FunctionFragment;
    'onERC1155Received(address,address,uint256,uint256,bytes)': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)': FunctionFragment;
    'safeTransferFrom(address,address,uint256,uint256,bytes)': FunctionFragment;
    'setAdmin(address)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setBaseURI(string)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'totalAssets()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateAsset(uint256,uint256,(bytes[],uint256[],uint256,uint256))': FunctionFragment;
    'uri(uint256)': FunctionFragment;
    'withdraw(address[])': FunctionFragment;
    'withdrawERC1155(address[],uint256[])': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'Admin', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'RemoveCreator',
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: 'addCreator', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'assets',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOfBatch',
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'createClass',
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'createNewAsset',
    values: [AssetConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAssetPrice',
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getClasses',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getCreators',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [GameAssetsConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'mintAssets',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'onERC1155BatchReceived',
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'onERC1155Received',
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'safeBatchTransferFrom',
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom',
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'setAdmin', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: 'setBaseURI', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'totalAssets',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateAsset',
    values: [BigNumberish, BigNumberish, StateConfigStruct]
  ): string;
  encodeFunctionData(functionFragment: 'uri', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [string[]]): string;
  encodeFunctionData(
    functionFragment: 'withdrawERC1155',
    values: [string[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: 'Admin', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'RemoveCreator',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'addCreator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'assets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'balanceOfBatch',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'createClass',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'createNewAsset',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAssetPrice',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getClasses', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getCreators',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isApprovedForAll',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'mintAssets', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'onERC1155BatchReceived',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'onERC1155Received',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'safeBatchTransferFrom',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setAdmin', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setApprovalForAll',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setBaseURI', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalAssets',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateAsset',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'uri', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawERC1155',
    data: BytesLike
  ): Result;

  events: {
    'AdminChanged(address)': EventFragment;
    'ApprovalForAll(address,address,bool)': EventFragment;
    'AssetCreated(uint256,tuple,tuple,tuple,string,string)': EventFragment;
    'AssetUpdated(uint256,tuple,tuple)': EventFragment;
    'BaseURIChanged(string)': EventFragment;
    'ClassCreated(uint256,string[],string,string)': EventFragment;
    'CreatorAdded(address)': EventFragment;
    'CreatorRemoved(address)': EventFragment;
    'Initialize(tuple)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Snapshot(address,address,tuple)': EventFragment;
    'TransferBatch(address,address,address,uint256[],uint256[])': EventFragment;
    'TransferSingle(address,address,address,uint256,uint256)': EventFragment;
    'URI(string,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BaseURIChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClassCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreatorAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreatorRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialize'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Snapshot'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferBatch'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferSingle'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'URI'): EventFragment;
}

export type AdminChangedEvent = TypedEvent<[string], { _admin: string }>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { account: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type AssetCreatedEvent = TypedEvent<
  [
    BigNumber,
    AssetDetailsStructOutput,
    StateConfigStructOutput,
    StateConfigStructOutput,
    string,
    string
  ],
  {
    _assetId: BigNumber;
    _asset: AssetDetailsStructOutput;
    _priceConfig: StateConfigStructOutput;
    _canMintConfig: StateConfigStructOutput;
    _name: string;
    _description: string;
  }
>;

export type AssetCreatedEventFilter = TypedEventFilter<AssetCreatedEvent>;

export type AssetUpdatedEvent = TypedEvent<
  [BigNumber, AssetDetailsStructOutput, StateConfigStructOutput],
  {
    _assetId: BigNumber;
    _asset: AssetDetailsStructOutput;
    _canMintConfig: StateConfigStructOutput;
  }
>;

export type AssetUpdatedEventFilter = TypedEventFilter<AssetUpdatedEvent>;

export type BaseURIChangedEvent = TypedEvent<[string], { _baseURI: string }>;

export type BaseURIChangedEventFilter = TypedEventFilter<BaseURIChangedEvent>;

export type ClassCreatedEvent = TypedEvent<
  [BigNumber, string[], string, string],
  {
    _classId: BigNumber;
    _attributes: string[];
    _name: string;
    _description: string;
  }
>;

export type ClassCreatedEventFilter = TypedEventFilter<ClassCreatedEvent>;

export type CreatorAddedEvent = TypedEvent<[string], { _addedCreator: string }>;

export type CreatorAddedEventFilter = TypedEventFilter<CreatorAddedEvent>;

export type CreatorRemovedEvent = TypedEvent<
  [string],
  { _removedCreator: string }
>;

export type CreatorRemovedEventFilter = TypedEventFilter<CreatorRemovedEvent>;

export type InitializeEvent = TypedEvent<
  [GameAssetsConfigStructOutput],
  { config: GameAssetsConfigStructOutput }
>;

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<
  OwnershipTransferredEvent
>;

export type SnapshotEvent = TypedEvent<
  [string, string, StateStructOutput],
  { sender: string; pointer: string; state: StateStructOutput }
>;

export type SnapshotEventFilter = TypedEventFilter<SnapshotEvent>;

export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  {
    operator: string;
    from: string;
    to: string;
    ids: BigNumber[];
    values: BigNumber[];
  }
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    operator: string;
    from: string;
    to: string;
    id: BigNumber;
    value: BigNumber;
  }
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export type URIEvent = TypedEvent<
  [string, BigNumber],
  { value: string; id: BigNumber }
>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface GameAssets extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GameAssetsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Admin(overrides?: CallOverrides): Promise<[string]>;

    RemoveCreator(
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addCreator(
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        StateStructOutput,
        StateStructOutput,
        BigNumber,
        number,
        string
      ] & {
        lootBoxId: BigNumber;
        id: BigNumber;
        priceConfig: StateStructOutput;
        canMintConfig: StateStructOutput;
        assetClass: BigNumber;
        rarity: number;
        creator: string;
      }
    >;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    createClass(
      _name: string,
      _description: string,
      _attributes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNewAsset(
      _config: AssetConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAssetPrice(
      _assetId: BigNumberish,
      _paymentToken: string,
      _units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getClasses(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getCreators(overrides?: CallOverrides): Promise<[string[]]>;

    initialize(
      _config: GameAssetsConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintAssets(
      _assetId: BigNumberish,
      _units: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAsset(
      _assetId: BigNumberish,
      _lootBoxId: BigNumberish,
      _canMintConfig: StateConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _tokenAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC1155(
      _tokenAddresses: string[],
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  Admin(overrides?: CallOverrides): Promise<string>;

  RemoveCreator(
    _creator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addCreator(
    _creator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      StateStructOutput,
      StateStructOutput,
      BigNumber,
      number,
      string
    ] & {
      lootBoxId: BigNumber;
      id: BigNumber;
      priceConfig: StateStructOutput;
      canMintConfig: StateStructOutput;
      assetClass: BigNumber;
      rarity: number;
      creator: string;
    }
  >;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  createClass(
    _name: string,
    _description: string,
    _attributes: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNewAsset(
    _config: AssetConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAssetPrice(
    _assetId: BigNumberish,
    _paymentToken: string,
    _units: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getClasses(overrides?: CallOverrides): Promise<BigNumber[]>;

  getCreators(overrides?: CallOverrides): Promise<string[]>;

  initialize(
    _config: GameAssetsConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintAssets(
    _assetId: BigNumberish,
    _units: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    _baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAsset(
    _assetId: BigNumberish,
    _lootBoxId: BigNumberish,
    _canMintConfig: StateConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  withdraw(
    _tokenAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC1155(
    _tokenAddresses: string[],
    _ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    Admin(overrides?: CallOverrides): Promise<string>;

    RemoveCreator(_creator: string, overrides?: CallOverrides): Promise<void>;

    addCreator(_creator: string, overrides?: CallOverrides): Promise<void>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        StateStructOutput,
        StateStructOutput,
        BigNumber,
        number,
        string
      ] & {
        lootBoxId: BigNumber;
        id: BigNumber;
        priceConfig: StateStructOutput;
        canMintConfig: StateStructOutput;
        assetClass: BigNumber;
        rarity: number;
        creator: string;
      }
    >;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    createClass(
      _name: string,
      _description: string,
      _attributes: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    createNewAsset(
      _config: AssetConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getAssetPrice(
      _assetId: BigNumberish,
      _paymentToken: string,
      _units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getClasses(overrides?: CallOverrides): Promise<BigNumber[]>;

    getCreators(overrides?: CallOverrides): Promise<string[]>;

    initialize(
      _config: GameAssetsConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintAssets(
      _assetId: BigNumberish,
      _units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(_baseURI: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAsset(
      _assetId: BigNumberish,
      _lootBoxId: BigNumberish,
      _canMintConfig: StateConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    withdraw(
      _tokenAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC1155(
      _tokenAddresses: string[],
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'AdminChanged(address)'(_admin?: null): AdminChangedEventFilter;
    AdminChanged(_admin?: null): AdminChangedEventFilter;

    'ApprovalForAll(address,address,bool)'(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    'AssetCreated(uint256,tuple,tuple,tuple,string,string)'(
      _assetId?: null,
      _asset?: null,
      _priceConfig?: null,
      _canMintConfig?: null,
      _name?: null,
      _description?: null
    ): AssetCreatedEventFilter;
    AssetCreated(
      _assetId?: null,
      _asset?: null,
      _priceConfig?: null,
      _canMintConfig?: null,
      _name?: null,
      _description?: null
    ): AssetCreatedEventFilter;

    'AssetUpdated(uint256,tuple,tuple)'(
      _assetId?: null,
      _asset?: null,
      _canMintConfig?: null
    ): AssetUpdatedEventFilter;
    AssetUpdated(
      _assetId?: null,
      _asset?: null,
      _canMintConfig?: null
    ): AssetUpdatedEventFilter;

    'BaseURIChanged(string)'(_baseURI?: null): BaseURIChangedEventFilter;
    BaseURIChanged(_baseURI?: null): BaseURIChangedEventFilter;

    'ClassCreated(uint256,string[],string,string)'(
      _classId?: null,
      _attributes?: null,
      _name?: null,
      _description?: null
    ): ClassCreatedEventFilter;
    ClassCreated(
      _classId?: null,
      _attributes?: null,
      _name?: null,
      _description?: null
    ): ClassCreatedEventFilter;

    'CreatorAdded(address)'(_addedCreator?: null): CreatorAddedEventFilter;
    CreatorAdded(_addedCreator?: null): CreatorAddedEventFilter;

    'CreatorRemoved(address)'(
      _removedCreator?: null
    ): CreatorRemovedEventFilter;
    CreatorRemoved(_removedCreator?: null): CreatorRemovedEventFilter;

    'Initialize(tuple)'(config?: null): InitializeEventFilter;
    Initialize(config?: null): InitializeEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    'Snapshot(address,address,tuple)'(
      sender?: null,
      pointer?: null,
      state?: null
    ): SnapshotEventFilter;
    Snapshot(sender?: null, pointer?: null, state?: null): SnapshotEventFilter;

    'TransferBatch(address,address,address,uint256[],uint256[])'(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    'TransferSingle(address,address,address,uint256,uint256)'(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    'URI(string,uint256)'(
      value?: null,
      id?: BigNumberish | null
    ): URIEventFilter;
    URI(value?: null, id?: BigNumberish | null): URIEventFilter;
  };

  estimateGas: {
    Admin(overrides?: CallOverrides): Promise<BigNumber>;

    RemoveCreator(
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addCreator(
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createClass(
      _name: string,
      _description: string,
      _attributes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNewAsset(
      _config: AssetConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAssetPrice(
      _assetId: BigNumberish,
      _paymentToken: string,
      _units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClasses(overrides?: CallOverrides): Promise<BigNumber>;

    getCreators(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _config: GameAssetsConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintAssets(
      _assetId: BigNumberish,
      _units: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAsset(
      _assetId: BigNumberish,
      _lootBoxId: BigNumberish,
      _canMintConfig: StateConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _tokenAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC1155(
      _tokenAddresses: string[],
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RemoveCreator(
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addCreator(
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createClass(
      _name: string,
      _description: string,
      _attributes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNewAsset(
      _config: AssetConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAssetPrice(
      _assetId: BigNumberish,
      _paymentToken: string,
      _units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClasses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCreators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _config: GameAssetsConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintAssets(
      _assetId: BigNumberish,
      _units: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAsset(
      _assetId: BigNumberish,
      _lootBoxId: BigNumberish,
      _canMintConfig: StateConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _tokenAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC1155(
      _tokenAddresses: string[],
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
